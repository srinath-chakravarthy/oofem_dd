/*
 *
 *                 #####    #####   ######  ######  ###   ###
 *               ##   ##  ##   ##  ##      ##      ## ### ##
 *              ##   ##  ##   ##  ####    ####    ##  #  ##
 *             ##   ##  ##   ##  ##      ##      ##     ##
 *            ##   ##  ##   ##  ##      ##      ##     ##
 *            #####    #####   ##      ######  ##     ##
 *
 *
 *             OOFEM : Object Oriented Finite Element Code
 *
 *               Copyright (C) 1993 - 2013   Borek Patzak
 *
 *
 *
 *       Czech Technical University, Faculty of Civil Engineering,
 *   Department of Structural Mechanics, 166 29 Prague, Czech Republic
 *
 *  This library is free software; you can redistribute it and/or
 *  modify it under the terms of the GNU Lesser General Public
 *  License as published by the Free Software Foundation; either
 *  version 2.1 of the License, or (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 *  Lesser General Public License for more details.
 *
 *  You should have received a copy of the GNU Lesser General Public
 *  License along with this library; if not, write to the Free Software
 *  Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
 */

#include "viscoplastic.h"
#include "Materials/isolinearelasticmaterial.h"
#include "gausspoint.h"
#include "floatmatrix.h"
#include "floatarray.h"
#include "intarray.h"
#include "stressvector.h"
#include "strainvector.h"
#include "mathfem.h"
#include "contextioerr.h"
#include "datastream.h"
#include "classfactory.h"

namespace oofem {
REGISTER_Material(ViscoPlastic);

// constructor
ViscoPlastic :: ViscoPlastic(int n, Domain *d) : StructuralMaterial(n, d)
{
    linearElasticMaterial = new IsotropicLinearElasticMaterial(n, d);
    N = 0.;
    sig0 = 0.;
    G = 0.;
    K = 0.;
    m0 = 0.;
    Cp = 1.0;
    
}

// destructor
ViscoPlastic :: ~ViscoPlastic()
{
    delete linearElasticMaterial;
}

// specifies whether a given material mode is supported by this model
int
ViscoPlastic :: hasMaterialModeCapability(MaterialMode mode)
{
    return mode == _3dMat || mode == _1dMat || mode == _PlaneStrain;
}

// reads the model parameters from the input file
IRResultType
ViscoPlastic :: initializeFrom(InputRecord *ir)
{
    IRResultType result;                 // required by IR_GIVE_FIELD macro

    StructuralMaterial :: initializeFrom(ir);
    linearElasticMaterial->initializeFrom(ir); // takes care of elastic constants
    G = static_cast< IsotropicLinearElasticMaterial * >(linearElasticMaterial)->giveShearModulus();
    K = static_cast< IsotropicLinearElasticMaterial * >(linearElasticMaterial)->giveBulkModulus();

    IR_GIVE_FIELD(ir, sig0, _IFT_ViscoPlastic_sig0); // uniaxial yield stress

    N = 0.;
    IR_GIVE_FIELD(ir, N, _IFT_ViscoPlastic_pow); // Plastic-work hardening exponent

    m0 = 0;
    IR_GIVE_FIELD(ir, m0, _IFT_ViscoPlastic_m); // Rate Sensitivity Exponent

    Cp = 1.0;
    IR_GIVE_OPTIONAL_FIELD(ir, Cp, _IFT_ViscoPlastic_cp); // Scaling factor in ViscoPlastic law

    /*********************************************************************************************************/
    /********************************************************************************************************/

    return IRRT_OK;
}

// creates a new material status  corresponding to this class
MaterialStatus *
ViscoPlastic :: CreateStatus(GaussPoint *gp) const
{
    ViscoPlasticStatus *status;
    status = new ViscoPlasticStatus(1, this->giveDomain(), gp);
    return status;
}


// returns the stress vector in 3d stress space
void
ViscoPlastic :: giveRealStressVector(FloatArray &answer,
                                 GaussPoint *gp,
                                 const FloatArray &totalStrain,
                                 TimeStep *tStep)
{
    ViscoPlasticStatus *status = static_cast< ViscoPlasticStatus * >( this->giveStatus(gp) );
    this->initTempStatus(gp);
    //this->initGpForNewStep(gp);
    this->performPlasticityReturn(gp, totalStrain);
    FloatArray totalStress = status->giveTempEffectiveStress();
    answer = totalStress;
    status->letTempStrainVectorBe(totalStrain);
    status->letTempStressVectorBe(answer);
}


void
ViscoPlastic :: giveFirstPKStressVector_3d(FloatArray &answer,
                                       GaussPoint *gp,
                                       const FloatArray &totalDefGradOOFEM,
                                       TimeStep *tStep)
{
    ViscoPlasticStatus *status = static_cast< ViscoPlasticStatus * >( this->giveStatus(gp) );

    this->initTempStatus(gp);
    //this->initGpForNewStep(gp);

    double kappa, dKappa, yieldValue, mi, H;
    FloatMatrix F, oldF, invOldF;
    FloatArray totalStrain;
    FloatArray s(6);
    F.beMatrixForm(totalDefGradOOFEM); //(method assumes full 3D)

    kappa = status->giveCumulativePlasticStrain();
    oldF.beMatrixForm( status->giveFVector() );
    invOldF.beInverseOf(oldF);
    //relative deformation radient
    FloatMatrix f;
    f.beProductOf(F, invOldF);
    //compute elastic predictor
    FloatMatrix trialLeftCauchyGreen, help;

    f.times( 1./cbrt(f.giveDeterminant()) );

    help.beProductOf(f, status->giveTempLeftCauchyGreen());
    trialLeftCauchyGreen.beProductTOf(help, f);
    FloatMatrix E;
    E.beTProductOf(F, F);
    E.at(1, 1) -= 1.0;
    E.at(2, 2) -= 1.0;
    E.at(3, 3) -= 1.0;
    E.times(0.5);

    FloatArray e;
    e.beSymVectorFormOfStrain(E);

    StrainVector leftCauchyGreen(_3dMat);
    StrainVector leftCauchyGreenDev(_3dMat);
    double leftCauchyGreenVol;

    leftCauchyGreen.beSymVectorFormOfStrain(trialLeftCauchyGreen);

    leftCauchyGreen.computeDeviatoricVolumetricSplit(leftCauchyGreenDev, leftCauchyGreenVol);
    StressVector trialStressDev(_3dMat);
    leftCauchyGreenDev.applyDeviatoricElasticStiffness(trialStressDev, G / 2.);
    s = trialStressDev;

    //check for plastic loading
    double trialS = trialStressDev.computeStressNorm();
    double sigmaY = sig0 + H * kappa;
    //yieldValue = sqrt(3./2.)*trialS-sigmaY;
    yieldValue = trialS - sqrt(2. / 3.) * sigmaY;


    //store deviatoric trial stress(reused by algorithmic stiffness)
    status->letTrialStressDevBe(trialStressDev);
    //the return-mapping algorithm
    double J = F.giveDeterminant();
    mi = leftCauchyGreenVol * G;
    if ( yieldValue > 0 ) {
        //dKappa =sqrt(3./2.)* yieldValue/(H + 3.*mi);
        //kappa = kappa + dKappa;
        //trialStressDev.times(1-sqrt(6.)*mi*dKappa/trialS);
        dKappa = ( yieldValue / ( 2 * mi ) ) / ( 1 + H / ( 3 * mi ) );
        FloatArray n = trialStressDev;
        n.times(2 * mi * dKappa / trialS);
        ////return map
        s.beDifferenceOf(trialStressDev, n);
        kappa += sqrt(2. / 3.) * dKappa;


        //update of intermediate configuration
        trialLeftCauchyGreen.beMatrixForm(s);
        trialLeftCauchyGreen.times(1.0 / G);
        trialLeftCauchyGreen.at(1, 1) += leftCauchyGreenVol;
        trialLeftCauchyGreen.at(2, 2) += leftCauchyGreenVol;
        trialLeftCauchyGreen.at(2, 2) += leftCauchyGreenVol;
        trialLeftCauchyGreen.times(J * J);
    }

    //addition of the elastic mean stress
    FloatMatrix kirchhoffStress;
    kirchhoffStress.beMatrixForm(s);
    kirchhoffStress.at(1, 1) += 1. / 2. *  K * ( J * J - 1 );
    kirchhoffStress.at(2, 2) += 1. / 2. *  K * ( J * J - 1 );
    kirchhoffStress.at(3, 3) += 1. / 2. *  K * ( J * J - 1 );


    FloatMatrix iF, Ep(3, 3), S;
    FloatArray vF, vS, ep;

    //transform Kirchhoff stress into Second Piola - Kirchhoff stress
    iF.beInverseOf(F);
    help.beProductOf(iF, kirchhoffStress);
    S.beProductTOf(help, iF);

    this->computeGLPlasticStrain(F, Ep, trialLeftCauchyGreen, J);

    ep.beSymVectorFormOfStrain(Ep);
    vS.beSymVectorForm(S);
    vF.beVectorForm(F);
    answer.beVectorForm(kirchhoffStress);

    status->setTrialStressVol(mi);
    status->letTempLeftCauchyGreenBe(trialLeftCauchyGreen);
    status->setTempCumulativePlasticStrain(kappa);
    status->letTempStressVectorBe(answer);
    status->letTempStrainVectorBe(e);
    status->letTempPlasticStrainBe(ep);
    status->letTempPVectorBe(answer);
    status->letTempFVectorBe(vF);
}


void
ViscoPlastic :: computeGLPlasticStrain(const FloatMatrix &F, FloatMatrix &Ep, FloatMatrix b, double J)
{
    FloatMatrix I, invB, help;
    I.resize(3, 3);
    I.beUnitMatrix();
    invB.beInverseOf(b);
    help.beTProductOf(F, invB);
    Ep.beProductOf(help, F);
    Ep.times( pow(J, -2. / 3.) );
    Ep.subtract(I);
    Ep.times(1. / 2.);
}


// returns the stress vector in 3d stress space
// computed from the previous plastic strain and current total strain
void
ViscoPlastic :: performPlasticityReturn(GaussPoint *gp, const FloatArray &totalStrain)
{
    double kappa, yieldValue, dKappa;
    double E; 
    double RHS, Bot, pama, Ratio, DEE;

    double sigmaY, h, dtrialS, H;

    double trialS;
    
    
    const double NRtol = 1.e-6; 
   
    FloatArray strain, plStrain;


    
    double kappa_init; 
    MaterialMode mode = gp->giveMaterialMode();
    ViscoPlasticStatus *status = static_cast< ViscoPlasticStatus * >( this->giveStatus(gp) );
    
    E = static_cast< IsotropicLinearElasticMaterial * >(linearElasticMaterial)->giveYoungsModulus();
    
    FloatArray fullStress;
    FloatArray StressDev;
    double StressVol;



    this->initTempStatus(gp);
    //this->initGpForNewStep(gp);
    // get the initial plastic strain and initial kappa from the status
    plStrain = status->givePlasticStrain();   
    kappa = status->giveCumulativePlasticStrain();
    kappa_init = kappa;
    
     // === radial return algorithm ===
    if ( totalStrain.giveSize() == 1 ) {
        LinearElasticMaterial *lmat = this->giveLinearElasticMaterial();
        double E = lmat->give('E', gp);
        /*trial stress*/
        fullStress.resize(6);
        fullStress.at(1) = E * ( totalStrain.at(1) - plStrain.at(1) );
        double trialS = fabs(fullStress.at(1));
        /*yield function*/
        double yieldValue = trialS - (sig0 + H * kappa);
        // === radial return algorithm ===
        if ( yieldValue > 0 ) {
            double dKappa = yieldValue / ( H + E );
            kappa += dKappa;
            plStrain.at(1) += dKappa * signum( fullStress.at(1) );
            plStrain.at(2) -= 0.5 * dKappa * signum( fullStress.at(1) );
            plStrain.at(3) -= 0.5 * dKappa * signum( fullStress.at(1) );
            fullStress.at(1) -= dKappa * E * signum( fullStress.at(1) );
        }
    } else {
        // Strain the end of the previous step --> total Strain vector
	FloatArray strain = status->giveStrainVector();
	FloatArray strain_dev;
	double strainVol; 
	
	strainVol = computeDeviatoricVolumetricSplit(strain_dev, strain);
	// Stress at the end of the previous step 
	FloatArray stress = status->giveStressVector();
	
	// Strain increment Quantities
	FloatArray strainIncrement = status->giveStrainVector();
	strainIncrement.zero();
	strainIncrement.beDifferenceOf(totalStrain, status->giveStrainVector());
	double strainIncrementVol;
	FloatArray strainIncrementDev; 
	strainIncrementVol = computeDeviatoricVolumetricSplit(strainIncrementDev, strainIncrement);
	
	// Equivalent strain increment
	
	DEE = strainIncrementDev.computeNorm();
	
	// Stress Quantities
	
	StressVol = computeDeviatoricVolumetricSplit(StressDev, stress);
	
	// J2 equivalent Stress
	trialS = sqrt( 3. / 2.) *StressDev.computeNorm();
	status->setTempEquivalentStress(trialS);	
	// Elastic Strain at previous step ---> computed from Stress
	FloatArray elStrainDev = status->giveTempPlasticStrain();
	elStrainDev.zero();
        double elStrainVol = strainVol;
	applyDeviatoricElasticCompliance(elStrainDev, StressDev, G);
	
	
    // **Change unused variable; 
    // double check_elStrainVol = StressVol / (3. * K);
	
      double totalStrainVol = elStrainVol + strainIncrementVol;
	
	
	// StrainTildeDev is the sum of Deviatoric elastic strain at previous and current total
	FloatArray StrainTildeDev;
	StrainTildeDev.add(strainIncrementDev);
	
	// Estar is the equivalent StrainTildeDev
	double EStar = sqrt (2. / 3.) * StrainTildeDev.computeNorm();
	
	
        // store the deviatoric and trial stress (reused by algorithmic stiffness)
        //status->letTrialStressDevBe(StressDev);
        //status->setTrialStressVol(StressVol);
        // check the yield condition at the trial state
	
	// New Flow stress at given plasticstrain kappa
	sigmaY = sig0 *pow(1.0 +  Cp*E * kappa/sig0, N);

	yieldValue = trialS/sigmaY;
	pama = pow ( yieldValue, m0);
	
	dKappa = DEE*pama;
	kappa = kappa_init + dKappa;
	trialS = 3. * G * (EStar - dKappa);
	do { 
	  sigmaY = sig0 *pow(1.0 +  Cp*E * kappa/sig0, N);
	  yieldValue = trialS/sigmaY;
	  pama = pow ( yieldValue, m0);
	  RHS = 3. * G * ( EStar - DEE * pama) - trialS;
	  h = DEE * pow (( trialS / sigmaY ), ( m0 - 1. )) * m0 / sigmaY;
	  Bot = 1 + 3. * G * h;
	  dtrialS = RHS / Bot; 
	  trialS += dtrialS;
	  if (trialS < 1.d-15) {
	    trialS = 1.d-15;
	  }
	  dKappa = EStar - trialS / (3. * G);
	  kappa = kappa_init + dKappa;
	} while (abs(dtrialS) > 1.e-12 || abs(dtrialS/trialS) > NRtol);
	
	// Calculate new Stress
	Ratio = 2. * G / ( 1. + 3. * G * dKappa / trialS);
	StressVol = 3. * K * totalStrainVol;
	// Apply Ratio to StrainTildeDev
	applyDeviatoricElasticStiffness(StressDev, StrainTildeDev, Ratio);
	computeDeviatoricVolumetricSum(fullStress, StressDev, StressVol);
	
	FloatArray dplStrain = plStrain;
	dplStrain.zero();
	// Calculate Plastic Strain and incremental Plastic Strain
	applyDeviatoricElasticCompliance(dplStrain, StressDev, 0.5);
	dplStrain.times(dKappa * 3. / trialS);
	plStrain.add(dplStrain);
    }

    status->letEffectiveStressBe(StressDev);
    status->setTrialStressVol(StressVol);
    
    //store the equivalent Stress in status
    status->setTempEquivalentStress(trialS);
    
    // store the effective stress in status
    status->letTempEffectiveStressBe(fullStress);
    // store the incremental effective deviatoric Strain
    status->setTempDeffTotalStrain(DEE);
    
    // store the effective stress in status
    status->letTempPlasticStrainBe(plStrain);
    status->setTempCumulativePlasticStrain(kappa);
}



void ViscoPlastic :: computeCumPlastStrain(double &tempKappa, GaussPoint *gp, TimeStep *tStep)
{
    ViscoPlasticStatus *status = static_cast< ViscoPlasticStatus * >( this->giveStatus(gp) );
    tempKappa = status->giveTempCumulativePlasticStrain();
}

void
ViscoPlastic :: give3dMaterialStiffnessMatrix(FloatMatrix &answer, MatResponseMode mode, GaussPoint *gp, TimeStep *tStep)
{
    give3dSSMaterialStiffnessMatrix(answer, mode, gp, tStep);
}

void
ViscoPlastic :: give3dMaterialStiffnessMatrix_dPdF(FloatMatrix &answer, MatResponseMode mode, GaussPoint *gp, TimeStep *tStep)
{
    ///@todo Directly compute dPdF instead.
    FloatMatrix dSdE;
    this->give3dLSMaterialStiffnessMatrix(dSdE, mode, gp, tStep);
    this->give_dPdF_from(dSdE, answer, gp);
}

// returns the consistent (algorithmic) tangent stiffness matrix
void
ViscoPlastic :: give3dSSMaterialStiffnessMatrix(FloatMatrix &answer,
                                            MatResponseMode mode,
                                            GaussPoint *gp,
                                            TimeStep *tStep)
{
    // start from the elastic stiffness
    this->giveLinearElasticMaterial()->give3dMaterialStiffnessMatrix(answer, mode, gp, tStep);
    if ( mode != TangentStiffness ) {
        return;
    }

    ViscoPlasticStatus *status = static_cast< ViscoPlasticStatus * >( this->giveStatus(gp) );
    double kappa = status->giveCumulativePlasticStrain();
    double tempKappa = status->giveTempCumulativePlasticStrain();
    // increment of cumulative plastic strain as an indicator of plastic loading
    double dKappa = tempKappa - kappa;

    if ( dKappa <= 0.0 ) { // elastic loading - elastic stiffness plays the role of tangent stiffness
        return;
    }

    // === plastic loading ===

    
    // Compute the equivalent deviatoric strain total
    //StrainVector TotalStrain(status->giveTempStrainVector(), mode);
    
    // **Changed
    StrainVector TotalStrain( status->giveTempStrainVector(), gp->giveMaterialMode() );
    // Deviatoric and Volumetric Components of the total Strain
    // **Changed
    StrainVector totalStrainDev( gp->giveMaterialMode() );
    double totalStrainVol;
    TotalStrain.computeDeviatoricVolumetricSplit(totalStrainDev,totalStrainVol);
    // New effective Strain of TotalStrain (estar)
    double EStar = sqrt( 2. / 3. ) * totalStrainDev.computeStrainNorm();   
    
    double DEE = status->givetempDeffTotalstrain();
    
    double trialS = status->giveTempEquivalentStress();
    
    double E = static_cast< IsotropicLinearElasticMaterial * >(linearElasticMaterial)->giveYoungsModulus();
    
    double sigmaY = sig0 * pow(1. +  Cp * E * kappa / sig0, N);
    
    // Calculate Q, R, h parameters
    double Q, R;
    double h = DEE * pow((trialS / sigmaY),(m0 - 1.))*m0/sigmaY;
    if ( trialS < 1.e-15 || EStar < 1.e-15){
      Q = 2.*G;
      R = 0.;
    }
    else {
      Q = 2. / 3. * trialS/EStar;
      R = 1. / (trialS * EStar) * (h - dKappa/trialS) * (3. * G) / (1. + 3. * G * h);
    }
    
    // Calculate New Stresses
    // **Change
    FloatArray fullStress (status->giveTempEffectiveStress());
    //FloatArray fullStress (status->giveTempEffectiveStress(), _3dMat);
    
    // **Change 
    FloatArray fullStressDev(status->giveTrialStressDev());
    // FloatArray fullStressDev(status->giveTrialStressDev(), _3dMat);
    
    fullStressDev.zero();
    // **Change unused variable
    double fullStressVol = computeDeviatoricVolumetricSplit(fullStressDev, fullStress);
    

    
    // one correction term
    FloatMatrix stiffnessCorrection(6, 6);
    stiffnessCorrection.beDyadicProductOf(fullStressDev, fullStressDev);
    double factor1 = -1.* R; 
    stiffnessCorrection.times(factor1);
    
    answer.add(stiffnessCorrection);

    // another correction term
    stiffnessCorrection.bePinvID();
    double factor2 = Q;
    answer.add(factor2, stiffnessCorrection);


}

void
ViscoPlastic :: give1dStressStiffMtrx(FloatMatrix &answer,
                                  MatResponseMode mode,
                                  GaussPoint *gp,
                                  TimeStep *tStep)
{
    this->giveLinearElasticMaterial()->giveStiffnessMatrix(answer, mode, gp, tStep);
    ViscoPlasticStatus *status = static_cast< ViscoPlasticStatus * >( this->giveStatus(gp) );
    double kappa = status->giveCumulativePlasticStrain();
    // increment of cumulative plastic strain as an indicator of plastic loading
    double tempKappa = status->giveTempCumulativePlasticStrain();
    
    // **Change unused variable
    // double E = answer.at(1, 1);
    if ( mode != TangentStiffness ) {
        return;
    }


    if ( ( tempKappa - kappa ) <= 0.0 ) { // elastic loading - elastic stiffness plays the role of tangent stiffness
        return;
    }


    // === plastic loading ===
    const FloatArray &stressVector = status->giveTempEffectiveStress();
    
    // **Change unused va
    // double stress = stressVector.at(1);
    answer.resize(1, 1);
}

void
ViscoPlastic :: givePlaneStrainStiffMtrx(FloatMatrix &answer,
                                     MatResponseMode mode,
                                     GaussPoint *gp,
                                     TimeStep *tStep)
{
    this->giveLinearElasticMaterial()->giveStiffnessMatrix(answer, mode, gp, tStep);
    if ( mode != TangentStiffness ) {
        return;
    }

    ViscoPlasticStatus *status = static_cast< ViscoPlasticStatus * >( this->giveStatus(gp) );
    double tempKappa = status->giveTempCumulativePlasticStrain();
    double kappa = status->giveCumulativePlasticStrain();
    double dKappa = tempKappa - kappa;

    if ( dKappa <= 0.0 ) { // elastic loading - elastic stiffness plays the role of tangent stiffness
        return;
    }

    // === plastic loading ===
     // === plastic loading ===

    
    // Compute the equivalent deviatoric strain total
    StrainVector TotalStrain(status->giveTempStrainVector(), gp->giveMaterialMode() );

    // Deviatoric and Volumetric Components of the total Strain
    StrainVector totalStrainDev( gp->giveMaterialMode() );
    double totalStrainVol;
    TotalStrain.computeDeviatoricVolumetricSplit(totalStrainDev,totalStrainVol);
    // New effective Strain of TotalStrain (estar)
    double EStar = sqrt( 2. / 3. ) * totalStrainDev.computeStrainNorm();   
    
    double DEE = status->givetempDeffTotalstrain();
    
    double trialS = status->giveTempEquivalentStress();
    
    double E = static_cast< IsotropicLinearElasticMaterial * >(linearElasticMaterial)->giveYoungsModulus();
    
    double sigmaY = sig0 * pow(1. +  Cp * E * kappa / sig0, N);
    
    // Calculate Q, R, h parameters
    double Q, R;
    double h = DEE * pow((trialS / sigmaY),(m0 - 1.))*m0/sigmaY;
    if ( trialS < 1.e-15 || EStar < 1.e-15){
      Q = 2.*G;
      R = 0.;
    }
    else {
      Q = 2. / 3. * trialS/EStar;
      R = 1. / (trialS * EStar) * (h - dKappa/trialS) * (3. * G) / (1. + 3. * G * h);
    }
    
    // Calculate New Stresses
    StressVector fullStress(status->giveTempEffectiveStress(), _PlaneStrain);
    StressVector fullStressDev(status->giveTrialStressDev(), _PlaneStrain);
    fullStressDev.zero();
    
    // **Change unused
    // double fullStressVol = computeDeviatoricVolumetricSplit(fullStressDev, fullStress);
    

    

    // one correction term
    FloatMatrix stiffnessCorrection(4, 4);
    stiffnessCorrection.beDyadicProductOf(fullStressDev, fullStressDev);
    double factor1 = -1. * R; 
    stiffnessCorrection.times(factor1);
    answer.add(stiffnessCorrection);

    // another correction term
    stiffnessCorrection.resize(4, 4);
    stiffnessCorrection.zero();
    stiffnessCorrection.at(1, 1) = stiffnessCorrection.at(2, 2) = stiffnessCorrection.at(3, 3) = 2. / 3.;
    stiffnessCorrection.at(1, 2) = stiffnessCorrection.at(1, 3) = stiffnessCorrection.at(2, 1) = -1. / 3.;
    stiffnessCorrection.at(2, 3) = stiffnessCorrection.at(3, 1) = stiffnessCorrection.at(3, 2) = -1. / 3.;
    stiffnessCorrection.at(4, 4) = 0.5;
    double factor2 = Q;
    stiffnessCorrection.times(factor2);
    answer.add(stiffnessCorrection);

}

void
ViscoPlastic :: give3dLSMaterialStiffnessMatrix(FloatMatrix &answer, MatResponseMode mode, GaussPoint *gp, TimeStep *tStep)
{
    ViscoPlasticStatus *status = static_cast< ViscoPlasticStatus * >( this->giveStatus(gp) );
    // start from the elastic stiffness

    FloatMatrix I(6, 6);
    I.at(1, 1) = I.at(2, 2) = I.at(3, 3) = 1;
    I.at(4, 4) = I.at(5, 5) = I.at(6, 6) = 0.5;
    FloatArray delta(6);
    delta.at(1) = delta.at(2) = delta.at(3) = 1;

    FloatMatrix F, F_Tr;
    F.beMatrixForm( status->giveTempFVector() );
    double J;
    J = F.giveDeterminant();

    StressVector trialStressDev(status->giveTrialStressDev(), _3dMat);
    double trialStressVol = status->giveTrialStressVol();
    double trialS = trialStressDev.computeStressNorm();
    FloatArray n = trialStressDev;
    if ( trialS == 0 ) {
        n.resize(6);
    } else {
        n.times(1 / trialS);
    }


    FloatMatrix Cdev(6, 6);
    FloatMatrix C(6, 6);
    FloatMatrix help(6, 6);
    help.beDyadicProductOf(delta, delta);
    C = help;
    help.times(-1. / 3.);
    FloatMatrix C1 = I;
    C1.add(help);
    C1.times(2 * trialStressVol);

    FloatMatrix n1(6, 6), n2(6, 6);
    n1.beDyadicProductOf(n, delta);
    n2.beDyadicProductOf(delta, n);
    help = n1;
    help.add(n2);
    help.times(-2. / 3. * trialS);
    C1.add(help);
    Cdev = C1;
    C.times(K * J * J);

    help = I;
    help.times( -K * ( J * J - 1 ) );
    C.add(help);
    FloatMatrix Cvol = C;
    C.add(C1);
    //////////////////////////////////////////////////////////////////////////////////////////////////////////

    FloatMatrix invF(3, 3);
    FloatMatrix T(6, 6), tT(6, 6);

    invF.beInverseOf(F);
    //////////////////////////////////////////////////
    //first row of pull back transformation matrix
    T.at(1, 1) = invF.at(1, 1) * invF.at(1, 1);
    T.at(1, 2) = invF.at(1, 2) * invF.at(1, 2);
    T.at(1, 3) = invF.at(1, 3) * invF.at(1, 3);
    T.at(1, 4) = 2. * invF.at(1, 2) * invF.at(1, 3);
    T.at(1, 5) = 2. * invF.at(1, 1) * invF.at(1, 3);
    T.at(1, 6) = 2. * invF.at(1, 1) * invF.at(1, 2);
    //second row of pull back transformation matrix
    T.at(2, 1) = invF.at(2, 1) * invF.at(2, 1);
    T.at(2, 2) = invF.at(2, 2) * invF.at(2, 2);
    T.at(2, 3) = invF.at(2, 3) * invF.at(2, 3);
    T.at(2, 4) = 2. * invF.at(2, 2) * invF.at(2, 3);
    T.at(2, 5) = 2. * invF.at(2, 1) * invF.at(2, 3);
    T.at(2, 6) = 2. * invF.at(2, 1) * invF.at(2, 2);
    //third row of pull back transformation matrix
    T.at(3, 1) = invF.at(3, 1) * invF.at(3, 1);
    T.at(3, 2) = invF.at(3, 2) * invF.at(3, 2);
    T.at(3, 3) = invF.at(3, 3) * invF.at(3, 3);
    T.at(3, 4) = 2. * invF.at(3, 2) * invF.at(3, 3);
    T.at(3, 5) = 2. * invF.at(3, 1) * invF.at(3, 3);
    T.at(3, 6) = 2. * invF.at(3, 1) * invF.at(3, 2);
    //fourth row of pull back transformation matrix
    T.at(4, 1) = invF.at(2, 1) * invF.at(3, 1);
    T.at(4, 2) = invF.at(2, 2) * invF.at(3, 2);
    T.at(4, 3) = invF.at(2, 3) * invF.at(3, 3);
    T.at(4, 4) = ( invF.at(2, 2) * invF.at(3, 3) + invF.at(2, 3) * invF.at(3, 2) );
    T.at(4, 5) = ( invF.at(2, 1) * invF.at(3, 3) + invF.at(2, 3) * invF.at(3, 1) );
    T.at(4, 6) = ( invF.at(2, 1) * invF.at(3, 2) + invF.at(2, 2) * invF.at(3, 1) );
    //fifth row of pull back transformation matrix
    T.at(5, 1) = invF.at(1, 1) * invF.at(3, 1);
    T.at(5, 2) = invF.at(1, 2) * invF.at(3, 2);
    T.at(5, 3) = invF.at(1, 3) * invF.at(3, 3);
    T.at(5, 4) = ( invF.at(1, 2) * invF.at(3, 3) + invF.at(1, 3) * invF.at(3, 2) );
    T.at(5, 5) = ( invF.at(1, 1) * invF.at(3, 3) + invF.at(1, 3) * invF.at(3, 1) );
    T.at(5, 6) = ( invF.at(1, 1) * invF.at(3, 2) + invF.at(1, 2) * invF.at(3, 1) );
    //sixth row of pull back transformation matrix
    T.at(6, 1) = invF.at(1, 1) * invF.at(2, 1);
    T.at(6, 2) = invF.at(1, 2) * invF.at(2, 2);
    T.at(6, 3) = invF.at(1, 3) * invF.at(2, 3);
    T.at(6, 4) = ( invF.at(1, 2) * invF.at(2, 3) + invF.at(1, 3) * invF.at(2, 2) );
    T.at(6, 5) = ( invF.at(1, 1) * invF.at(2, 3) + invF.at(1, 3) * invF.at(2, 1) );
    T.at(6, 6) = ( invF.at(1, 1) * invF.at(2, 2) + invF.at(1, 2) * invF.at(2, 1) );
    ///////////////////////////////////////////

    if ( mode != TangentStiffness ) {
        help.beProductTOf(C, T);
        answer.beProductOf(T, help);
        return;
    }


    double kappa = status->giveCumulativePlasticStrain();
    // increment of cumulative plastic strain as an indicator of plastic loading
    double dKappa = sqrt(3. / 2.) * ( status->giveTempCumulativePlasticStrain() - kappa );
    //double dKappa = ( status->giveTempCumulativePlasticStrain() - kappa);
    if ( dKappa <= 0.0 ) { // elastic loading - elastic stiffness plays the role of tangent stiffness
        help.beProductTOf(C, T);
        answer.beProductOf(T, help);
        return;
    }

    // === plastic loading ===
    //dKappa = dKappa*sqrt(3./2.);
    // trial deviatoric stress and its norm


    double beta0, beta1, beta2, beta3, beta4, H;
    if ( trialS == 0 ) {
        beta1 = 0;
    } else {
        beta1 = 2 * trialStressVol * dKappa / trialS;
    }

    if ( trialStressVol == 0 ) {
        beta0 = 0;
        beta2 = 0;
        beta3 = beta1;
        beta4 = 0;
    } else {
        beta0 = 1 + H / 3 / trialStressVol;
        beta2 = ( 1 - 1 / beta0 ) * 2. / 3. * trialS * dKappa / trialStressVol;
        beta3 = 1 / beta0 - beta1 + beta2;
        beta4 = ( 1 / beta0 - beta1 ) * trialS / trialStressVol;
    }

    FloatMatrix N;
    N.beDyadicProductOf(n, n);
    N.times(-2 * trialStressVol * beta3);
    answer.resize(6, 6);

    C1.times(-beta1);
    FloatMatrix mN(3, 3);
    mN.at(1, 1) = n.at(1);
    mN.at(1, 2) = n.at(6);
    mN.at(1, 3) = n.at(5);
    mN.at(2, 1) = n.at(6);
    mN.at(2, 2) = n.at(2);
    mN.at(2, 3) = n.at(4);
    mN.at(3, 1) = n.at(5);
    mN.at(3, 2) = n.at(4);
    mN.at(3, 3) = n.at(3);
    FloatMatrix mN2(3, 3);
    mN2.beProductOf(mN, mN);

    double volN2 = 1. / 3. * ( mN2.at(1, 1) + mN2.at(2, 2) + mN2.at(3, 3) );
    FloatArray devN2(6);
    devN2.at(1) = mN2.at(1, 1) - volN2;
    devN2.at(2) = mN2.at(2, 2) - volN2;

    devN2.at(3) = mN2.at(3, 3) - volN2;
    devN2.at(4) = mN2.at(2, 3);
    devN2.at(5) = mN2.at(1, 3);
    devN2.at(6) = mN2.at(1, 2);
    FloatMatrix nonSymPart;
    nonSymPart.beDyadicProductOf(n, devN2);
    //symP.beTranspositionOf(nonSymPart);
    //symP.add(nonSymPart);
    //symP.times(1./2.);
    nonSymPart.times(-2 * trialStressVol * beta4);

    C.add(C1);
    C.add(N);
    C.add(nonSymPart);
    help.beProductTOf(C, T);
    answer.beProductOf(T, help);
}


#ifdef __OOFEG
#endif

int
ViscoPlastic :: giveIPValue(FloatArray &answer, GaussPoint *gp, InternalStateType type, TimeStep *tStep)
{
    ViscoPlasticStatus *status = static_cast< ViscoPlasticStatus * >( this->giveStatus(gp) );
    if ( type == IST_PlasticStrainTensor ) {
        const FloatArray &ep = status->givePlasDef();
        ///@todo Fix this so that it doesn't just fill in zeros for plane stress:
        StructuralMaterial :: giveFullSymVectorForm( answer, ep, gp->giveMaterialMode() );
        return 1;
    } else if ( type == IST_MaxEquivalentStrainLevel ) {
        answer.resize(1);
        answer.at(1) = status->giveCumulativePlasticStrain();
        return 1;
    } else {
        return StructuralMaterial :: giveIPValue(answer, gp, type, tStep);
    }
}

//=============================================================================

ViscoPlasticStatus :: ViscoPlasticStatus(int n, Domain *d, GaussPoint *g) :
    StructuralMaterialStatus(n, d, g), plasticStrain(), tempPlasticStrain(), trialStressD()
{
    kappa = tempKappa = 0.;
    effStress.resize(6);
    tempEffStress.resize(6);
    leftCauchyGreen.resize(3, 3);
    leftCauchyGreen.at(1, 1) = leftCauchyGreen.at(2, 2) = leftCauchyGreen.at(3, 3) = 1;
}

ViscoPlasticStatus :: ~ViscoPlasticStatus()
{ }

void
ViscoPlasticStatus :: printOutputAt(FILE *file, TimeStep *tStep)
{
    //int i, n;

    StructuralMaterialStatus :: printOutputAt(file, tStep);

    fprintf(file, "status { ");
    /*
     * // this would not be correct, since the status is already updated and kappa is now the "final" value
     * if ( tempKappa > kappa ) {
     * fprintf(file, " Yielding, ");
     * } else {
     * fprintf(file, " Unloading, ");
     * }
     */

    /*********************************************************************************/

    /********************************************************************************/
    /*
     * // print the plastic strain
     *  n = plasticStrain.giveSize();
     *  fprintf(file, " plastic_strains ");
     *  for ( i = 1; i <= n; i++ ) {
     *      fprintf( file, " % .4e", plasticStrain.at(i) );
     *  }
     */
    // print the cumulative plastic strain
    fprintf(file, ", kappa ");
    fprintf(file, " % .4e", kappa);

    fprintf(file, "}\n");
    /*
     * //print Left Cauchy - Green deformation tensor
     * fprintf(file," left Cauchy Green");
     * fprintf( file, " % .4e",tempLeftCauchyGreen.at(1,1) );
     * fprintf( file, " % .4e",tempLeftCauchyGreen.at(2,2) );
     * fprintf( file, " % .4e",tempLeftCauchyGreen.at(3,3) );
     * fprintf( file, " % .4e",tempLeftCauchyGreen.at(2,3) );
     * fprintf( file, " % .4e",tempLeftCauchyGreen.at(1,3) );
     * fprintf( file, " % .4e",tempLeftCauchyGreen.at(1,2) );
     *
     * //print deformation gradient
     * fprintf(file," Deformation Gradient");
     * fprintf( file, " % .4e",tempDefGrad.at(1,1) );
     * fprintf( file, " % .4e",tempDefGrad.at(1,2) );
     * fprintf( file, " % .4e",tempDefGrad.at(1,3) );
     * fprintf( file, " % .4e",tempDefGrad.at(2,1) );
     * fprintf( file, " % .4e",tempDefGrad.at(2,2) );
     * fprintf( file, " % .4e",tempDefGrad.at(2,3) );
     * fprintf( file, " % .4e",tempDefGrad.at(3,1) );
     * fprintf( file, " % .4e",tempDefGrad.at(3,2) );
     * fprintf( file, " % .4e",tempDefGrad.at(3,3) );
     */

    fprintf(file, "}\n");
}


// initializes temporary variables based on their values at the previous equlibrium state
void ViscoPlasticStatus :: initTempStatus()
{
    StructuralMaterialStatus :: initTempStatus();

    if ( plasticStrain.giveSize() == 0 ) {
        plasticStrain.resize( StructuralMaterial :: giveSizeOfVoigtSymVector( gp->giveMaterialMode() ) );
        plasticStrain.zero();
    }

    tempPlasticStrain = plasticStrain;
    tempKappa = kappa;
    trialStressD.clear(); // to indicate that it is not defined yet
    tempLeftCauchyGreen = leftCauchyGreen;
}


// updates internal variables when equilibrium is reached
void
ViscoPlasticStatus :: updateYourself(TimeStep *tStep)
{
    StructuralMaterialStatus :: updateYourself(tStep);

    plasticStrain = tempPlasticStrain;
    kappa = tempKappa;
    trialStressD.clear(); // to indicate that it is not defined any more
    leftCauchyGreen = tempLeftCauchyGreen;
}


// saves full information stored in this status
// temporary variables are NOT stored
contextIOResultType
ViscoPlasticStatus :: saveContext(DataStream &stream, ContextMode mode, void *obj)
{
    contextIOResultType iores;

    // save parent class status
    if ( ( iores = StructuralMaterialStatus :: saveContext(stream, mode, obj) ) != CIO_OK ) {
        THROW_CIOERR(iores);
    }

    // write raw data

    // write plastic strain (vector)
    if ( ( iores = plasticStrain.storeYourself(stream) ) != CIO_OK ) {
        THROW_CIOERR(iores);
    }

    // write cumulative plastic strain (scalar)
    if ( !stream.write(kappa) ) {
        THROW_CIOERR(CIO_IOERR);
    }

    // write damage (scalar)
    return CIO_OK;
}



contextIOResultType
ViscoPlasticStatus :: restoreContext(DataStream &stream, ContextMode mode, void *obj)
//
// restores full information stored in stream to this Status
//
{
    contextIOResultType iores;

    // read parent class status
    if ( ( iores = StructuralMaterialStatus :: restoreContext(stream, mode, obj) ) != CIO_OK ) {
        THROW_CIOERR(iores);
    }

    // read plastic strain (vector)
    if ( ( iores = plasticStrain.restoreYourself(stream) ) != CIO_OK ) {
        THROW_CIOERR(iores);
    }

    // read cumulative plastic strain (scalar)
    if ( !stream.read(kappa) ) {
        THROW_CIOERR(CIO_IOERR);
    }

    return CIO_OK; // return succes
}
} // end namespace oofem
